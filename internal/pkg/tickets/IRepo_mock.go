// Code generated by MockGen. DO NOT EDIT.
// Source: IRepo.go

// Package tickets is a generated GoMock package.
package tickets

import (
	models "RSOI_CW/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method.
func (m *MockIRepo) CreateTicket(ticket models.Ticket) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ticket)
	ret0, _ := ret[0].(int)
	return ret0
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockIRepoMockRecorder) CreateTicket(ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockIRepo)(nil).CreateTicket), ticket)
}

// DeleteTicket mocks base method.
func (m *MockIRepo) DeleteTicket(uuid uuid.UUID) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", uuid)
	ret0, _ := ret[0].(int)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockIRepoMockRecorder) DeleteTicket(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockIRepo)(nil).DeleteTicket), uuid)
}

// GetAllTickets mocks base method.
func (m *MockIRepo) GetAllTickets() ([]models.Ticket, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTickets")
	ret0, _ := ret[0].([]models.Ticket)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetAllTickets indicates an expected call of GetAllTickets.
func (mr *MockIRepoMockRecorder) GetAllTickets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTickets", reflect.TypeOf((*MockIRepo)(nil).GetAllTickets))
}

// GetTicket mocks base method.
func (m *MockIRepo) GetTicket(uuid uuid.UUID) (models.Ticket, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicket", uuid)
	ret0, _ := ret[0].(models.Ticket)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetTicket indicates an expected call of GetTicket.
func (mr *MockIRepoMockRecorder) GetTicket(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicket", reflect.TypeOf((*MockIRepo)(nil).GetTicket), uuid)
}

// GetTickets mocks base method.
func (m *MockIRepo) GetTickets(uuid uuid.UUID) ([]models.Ticket, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickets", uuid)
	ret0, _ := ret[0].([]models.Ticket)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetTickets indicates an expected call of GetTickets.
func (mr *MockIRepoMockRecorder) GetTickets(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickets", reflect.TypeOf((*MockIRepo)(nil).GetTickets), uuid)
}
