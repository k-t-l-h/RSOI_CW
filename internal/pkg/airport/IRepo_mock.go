// Code generated by MockGen. DO NOT EDIT.
// Source: IRepo.go

// Package airport is a generated GoMock package.
package airport

import (
	models "RSOI_CW/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// SelectAirport mocks base method.
func (m *MockIRepo) SelectAirport(uuid uuid.UUID) (models.Airport, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAirport", uuid)
	ret0, _ := ret[0].(models.Airport)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// SelectAirport indicates an expected call of SelectAirport.
func (mr *MockIRepoMockRecorder) SelectAirport(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAirport", reflect.TypeOf((*MockIRepo)(nil).SelectAirport), uuid)
}

// SelectAirports mocks base method.
func (m *MockIRepo) SelectAirports() ([]models.Airport, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAirports")
	ret0, _ := ret[0].([]models.Airport)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// SelectAirports indicates an expected call of SelectAirports.
func (mr *MockIRepoMockRecorder) SelectAirports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAirports", reflect.TypeOf((*MockIRepo)(nil).SelectAirports))
}
